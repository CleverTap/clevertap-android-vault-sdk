package com.clevertap.android.vault.sdk.util

import android.util.Log

/**
 * Logger utility for the Vault SDK.
 *
 * This class provides standardized logging functionality throughout the Vault SDK,
 * with support for different log levels and conditional logging based on debug mode.
 * It acts as a wrapper around Android's logging system to maintain consistent logging
 * patterns and provide better control over log visibility.
 *
 * When debug mode is enabled, all log levels (debug, info, warning, and error) are output.
 * When debug mode is disabled, no logs are shown, providing a clean log output in production.
 *
 * @property debugMode Controls whether logs are output.
 *                    When false, all logs will be suppressed.
 *
 * @constructor Creates a VaultLogger with the specified debug mode setting.
 */
class VaultLogger(private val debugMode: Boolean) {
    companion object {
        /**
         * Constant tag used for all logs generated by the Vault SDK.
         * This helps identify logs originating from the SDK in logcat output.
         */
        private const val TAG = "CT-VaultSDK"
    }

    /**
     * Logs a debug message.
     *
     * Debug messages are only logged when debug mode is enabled.
     * These messages are typically used for detailed development information
     * that would be too verbose for normal operation.
     *
     * @param message The message to log at debug level.
     */
    fun d(message: String) {
        if (debugMode) {
            Log.d(TAG, message)
        }
    }

    /**
     * Logs an error message.
     *
     * Error messages are only logged when debug mode is enabled.
     * These messages indicate issues that prevent normal operation
     * of the SDK or represent exceptional conditions.
     *
     * @param message The message to log at error level.
     * @param throwable Optional exception associated with the error.
     *                 If provided, the exception's stack trace will be included in the log.
     */
    fun e(message: String, throwable: Throwable? = null) {
        if (debugMode) {
            Log.e(TAG, message, throwable)
        }
    }

    /**
     * Logs an info message.
     *
     * Info messages are only logged when debug mode is enabled.
     * These messages represent informational events that highlight
     * the progress of the application at a coarse-grained level.
     *
     * @param message The message to log at info level.
     */
    fun i(message: String) {
        if (debugMode) {
            Log.i(TAG, message)
        }
    }

    /**
     * Logs a warning message.
     *
     * Warning messages are only logged when debug mode is enabled.
     * These messages indicate potentially harmful situations or
     * unexpected behavior that doesn't prevent normal operation.
     *
     * @param message The message to log at warning level.
     */
    fun w(message: String) {
        if (debugMode) {
            Log.w(TAG, message)
        }
    }
}